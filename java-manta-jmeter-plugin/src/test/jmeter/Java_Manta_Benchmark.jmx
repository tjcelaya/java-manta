<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="it_size" elementType="Argument">
            <stringProp name="Argument.name">it_size</stringProp>
            <stringProp name="Argument.value">${__P(iteration,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="depth_control" elementType="Argument">
            <stringProp name="Argument.name">depth_control</stringProp>
            <stringProp name="Argument.value">${__P(depth,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="thread_count" elementType="Argument">
            <stringProp name="Argument.name">thread_count</stringProp>
            <stringProp name="Argument.value">${__P(threads,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="encrypt" elementType="Argument">
            <stringProp name="Argument.name">encrypt</stringProp>
            <stringProp name="Argument.value">${__P(encrypt,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="upload" elementType="Argument">
            <stringProp name="Argument.name">upload</stringProp>
            <stringProp name="Argument.value">${__P(upload,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="verify" elementType="Argument">
            <stringProp name="Argument.name">verify</stringProp>
            <stringProp name="Argument.value">${__P(verify,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="multipart" elementType="Argument">
            <stringProp name="Argument.name">multipart</stringProp>
            <stringProp name="Argument.value">${__P(multipart,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cleanup" elementType="Argument">
            <stringProp name="Argument.name">cleanup</stringProp>
            <stringProp name="Argument.value">${__P(cleanup,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="duration" elementType="Argument">
            <stringProp name="Argument.name">duration</stringProp>
            <stringProp name="Argument.value">${__P(duration,0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="local_file" elementType="Argument">
            <stringProp name="Argument.name">local_file</stringProp>
            <stringProp name="Argument.value">/tmp/garbage.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1496682015000</longProp>
        <longProp name="ThreadGroup.end_time">1496682015000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Create Base Directory" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="depth" elementType="Argument">
                <stringProp name="Argument.name">depth</stringProp>
                <stringProp name="Argument.value">7</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ThreadNumber" elementType="Argument">
                <stringProp name="Argument.name">ThreadNumber</stringProp>
                <stringProp name="Argument.value">${__threadNum}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Iteration" elementType="Argument">
                <stringProp name="Argument.name">Iteration</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CurrentDepth" elementType="Argument">
                <stringProp name="Argument.name">CurrentDepth</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="BaseDir" elementType="Argument">
                <stringProp name="Argument.name">BaseDir</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isBaseDir" elementType="Argument">
                <stringProp name="Argument.name">isBaseDir</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">com.joyent.manta.jmeter.CreateDirectory</stringProp>
        </JavaSampler>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Getting Base Directory" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">baseDir</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..baseDir</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Adding base directory as property" enabled="true">
            <stringProp name="TestPlan.comments">The reasononing behind this is strange, variables only exist in the thread context. So we need to set a property.</stringProp>
            <stringProp name="BeanShellAssertion.query">${__setProperty(baseDir,${baseDir})}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Create temp file" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="size" elementType="Argument">
                <stringProp name="Argument.name">size</stringProp>
                <stringProp name="Argument.value">5242880</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="filename" elementType="Argument">
                <stringProp name="Argument.name">filename</stringProp>
                <stringProp name="Argument.value">${local_file}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">com.joyent.manta.jmeter.GeneratedFile</stringProp>
        </JavaSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Main Test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${thread_count}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1496352692000</longProp>
        <longProp name="ThreadGroup.end_time">1496352692000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Resetting the base directory" enabled="true">
          <stringProp name="BeanShellSampler.query">String directory = &quot;${__property(baseDir)}&quot;;
vars.put(&quot;baseDir&quot;, directory);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="baseDir" elementType="Argument">
              <stringProp name="Argument.name">baseDir</stringProp>
              <stringProp name="Argument.value">${__property(baseDir)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Upload Loop" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${it_size}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Iteration Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">${it_size}</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">iteration</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
            <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Depth Loop" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${depth_control}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Depth Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">${depth_control}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">depth</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Create Directory" enabled="true">
              <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="depth" elementType="Argument">
                    <stringProp name="Argument.name">depth</stringProp>
                    <stringProp name="Argument.value">7</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ThreadNumber" elementType="Argument">
                    <stringProp name="Argument.name">ThreadNumber</stringProp>
                    <stringProp name="Argument.value">${__threadNum}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="Iteration" elementType="Argument">
                    <stringProp name="Argument.name">Iteration</stringProp>
                    <stringProp name="Argument.value">${iteration}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="CurrentDepth" elementType="Argument">
                    <stringProp name="Argument.name">CurrentDepth</stringProp>
                    <stringProp name="Argument.value">${depth}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="BaseDir" elementType="Argument">
                    <stringProp name="Argument.name">BaseDir</stringProp>
                    <stringProp name="Argument.value">${baseDir}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="isBaseDir" elementType="Argument">
                    <stringProp name="Argument.name">isBaseDir</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="classname">com.joyent.manta.jmeter.CreateDirectory</stringProp>
            </JavaSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Update Directory" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">baseDir</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..Directory</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Uploaded" enabled="true">
              <stringProp name="IfController.condition">${upload}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If multipart" enabled="true">
                <stringProp name="IfController.condition">${multipart}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Upload Multipart" enabled="true">
                  <stringProp name="TestPlan.comments">Split size makes no difference for this type, I do have a split in the code but it does not work correctly.
But it is ignored if you give an array of files.</stringProp>
                  <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="multipart" elementType="Argument">
                        <stringProp name="Argument.name">multipart</stringProp>
                        <stringProp name="Argument.value">${multipart}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="splitSize" elementType="Argument">
                        <stringProp name="Argument.name">splitSize</stringProp>
                        <stringProp name="Argument.value">5242880</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="directory" elementType="Argument">
                        <stringProp name="Argument.name">directory</stringProp>
                        <stringProp name="Argument.value">${baseDir}/</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="fileName" elementType="Argument">
                        <stringProp name="Argument.name">fileName</stringProp>
                        <stringProp name="Argument.value">obj_${iteration}-${__threadNum}.txt</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="localfile" elementType="Argument">
                        <stringProp name="Argument.name">localfile</stringProp>
                        <stringProp name="Argument.value">${local_file}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="verifyUpload" elementType="Argument">
                        <stringProp name="Argument.name">verifyUpload</stringProp>
                        <stringProp name="Argument.value">${verify}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="encrypted" elementType="Argument">
                        <stringProp name="Argument.name">encrypted</stringProp>
                        <stringProp name="Argument.value">${encrypt}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="socketTimeout" elementType="Argument">
                        <stringProp name="Argument.name">socketTimeout</stringProp>
                        <stringProp name="Argument.value">10000</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="retries" elementType="Argument">
                        <stringProp name="Argument.name">retries</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="maxConnections" elementType="Argument">
                        <stringProp name="Argument.name">maxConnections</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="encryptionAlgorithm" elementType="Argument">
                        <stringProp name="Argument.name">encryptionAlgorithm</stringProp>
                        <stringProp name="Argument.value">AES256/CTR/NoPadding</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="classname">com.joyent.manta.jmeter.UploadMultipartFile</stringProp>
                </JavaSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Single Part" enabled="true">
                <stringProp name="IfController.condition">${multipart} == false</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Upload Single File" enabled="true">
                  <stringProp name="TestPlan.comments">Split size makes no difference for this type, I do have a split in the code but it does not work correctly.
But it is ignored if you give an array of files.</stringProp>
                  <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="multipart" elementType="Argument">
                        <stringProp name="Argument.name">multipart</stringProp>
                        <stringProp name="Argument.value">${multipart}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="splitSize" elementType="Argument">
                        <stringProp name="Argument.name">splitSize</stringProp>
                        <stringProp name="Argument.value">5242880</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="directory" elementType="Argument">
                        <stringProp name="Argument.name">directory</stringProp>
                        <stringProp name="Argument.value">${baseDir}/</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="fileName" elementType="Argument">
                        <stringProp name="Argument.name">fileName</stringProp>
                        <stringProp name="Argument.value">obj_${iteration}-${__threadNum}.txt</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="localfile" elementType="Argument">
                        <stringProp name="Argument.name">localfile</stringProp>
                        <stringProp name="Argument.value">../../../src/test/data/result.txt</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="verifyUpload" elementType="Argument">
                        <stringProp name="Argument.name">verifyUpload</stringProp>
                        <stringProp name="Argument.value">${verify}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="encrypted" elementType="Argument">
                        <stringProp name="Argument.name">encrypted</stringProp>
                        <stringProp name="Argument.value">${encrypt}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="socketTimeout" elementType="Argument">
                        <stringProp name="Argument.name">socketTimeout</stringProp>
                        <stringProp name="Argument.value">10000</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="retries" elementType="Argument">
                        <stringProp name="Argument.name">retries</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="maxConnections" elementType="Argument">
                        <stringProp name="Argument.name">maxConnections</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="encryptionAlgorithm" elementType="Argument">
                        <stringProp name="Argument.name">encryptionAlgorithm</stringProp>
                        <stringProp name="Argument.value">AES256/CTR/NoPadding</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="classname">com.joyent.manta.jmeter.UploadMultipartFile</stringProp>
                </JavaSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If we are verifying the result" enabled="true">
                <stringProp name="IfController.condition">${verify}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Download Object" enabled="true">
                  <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="file" elementType="Argument">
                        <stringProp name="Argument.name">file</stringProp>
                        <stringProp name="Argument.value">${baseDir}/obj_${iteration}-${__threadNum}.txt</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="localfile" elementType="Argument">
                        <stringProp name="Argument.name">localfile</stringProp>
                        <stringProp name="Argument.value">/tmp/obj-${iteration}-${__threadNum}.txt</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="encrypted" elementType="Argument">
                        <stringProp name="Argument.name">encrypted</stringProp>
                        <stringProp name="Argument.value">${encrypt}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="encryptionAlgorithm" elementType="Argument">
                        <stringProp name="Argument.name">encryptionAlgorithm</stringProp>
                        <stringProp name="Argument.value">AES256/CTR/NoPadding</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="classname">com.joyent.manta.jmeter.DownloadObject</stringProp>
                </JavaSampler>
                <hashTree/>
                <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Diff the original vs downloaded." enabled="true">
                  <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                  <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                  <stringProp name="SystemSampler.command">/usr/bin/diff</stringProp>
                  <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="Argument">
                        <stringProp name="Argument.name"></stringProp>
                        <stringProp name="Argument.value">-q</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Argument">
                        <stringProp name="Argument.name"></stringProp>
                        <stringProp name="Argument.value">/tmp/obj-${iteration}-${__threadNum}.txt</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Argument">
                        <stringProp name="Argument.name"></stringProp>
                        <stringProp name="Argument.value">${local_file}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="SystemSampler.directory"></stringProp>
                </SystemSampler>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1331942542">differ</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Delete the dled file" enabled="false">
                  <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                  <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                  <stringProp name="SystemSampler.command">/bin/rm</stringProp>
                  <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="Argument">
                        <stringProp name="Argument.name"></stringProp>
                        <stringProp name="Argument.value">/tmp/obj-${iteration}-${__threadNum}.txt</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="SystemSampler.directory"></stringProp>
                </SystemSampler>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1331942542">differ</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Directoty Listing" enabled="true">
                <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="directory" elementType="Argument">
                      <stringProp name="Argument.name">directory</stringProp>
                      <stringProp name="Argument.value">${baseDir}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="filter" elementType="Argument">
                      <stringProp name="Argument.name">filter</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="classname">com.joyent.manta.jmeter.DirectoryListing</stringProp>
              </JavaSampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">String directory = &quot;${__property(baseDir)}&quot;;
vars.put(&quot;baseDir&quot;, directory);
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="3404360">obj_</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Generated" enabled="true">
              <stringProp name="IfController.condition">${upload} == false</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="TestPlan.comments">So we generate</stringProp>
            </IfController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If multipart" enabled="true">
                <stringProp name="IfController.condition">${multipart}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Upload Multipart" enabled="true">
                  <stringProp name="TestPlan.comments">Split size makes no difference for this type, I do have a split in the code but it does not work correctly.
But it is ignored if you give an array of files.</stringProp>
                  <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="multipart" elementType="Argument">
                        <stringProp name="Argument.name">multipart</stringProp>
                        <stringProp name="Argument.value">${multipart}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="splitSize" elementType="Argument">
                        <stringProp name="Argument.name">splitSize</stringProp>
                        <stringProp name="Argument.value">5242880</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="noOfSplits" elementType="Argument">
                        <stringProp name="Argument.name">noOfSplits</stringProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="directory" elementType="Argument">
                        <stringProp name="Argument.name">directory</stringProp>
                        <stringProp name="Argument.value">${baseDir}/</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="fileName" elementType="Argument">
                        <stringProp name="Argument.name">fileName</stringProp>
                        <stringProp name="Argument.value">obj_${iteration}-${__threadNum}.txt</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="verifyUpload" elementType="Argument">
                        <stringProp name="Argument.name">verifyUpload</stringProp>
                        <stringProp name="Argument.value">${verify}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="encrypted" elementType="Argument">
                        <stringProp name="Argument.name">encrypted</stringProp>
                        <stringProp name="Argument.value">${encrypt}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="socketTimeout" elementType="Argument">
                        <stringProp name="Argument.name">socketTimeout</stringProp>
                        <stringProp name="Argument.value">10000</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="retries" elementType="Argument">
                        <stringProp name="Argument.name">retries</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="maxConnections" elementType="Argument">
                        <stringProp name="Argument.name">maxConnections</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="encryptionAlgorithm" elementType="Argument">
                        <stringProp name="Argument.name">encryptionAlgorithm</stringProp>
                        <stringProp name="Argument.value">AES256/CTR/NoPadding</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="classname">com.joyent.manta.jmeter.UploadGeneratedFile</stringProp>
                </JavaSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Single Part" enabled="true">
                <stringProp name="IfController.condition">${multipart} == false</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Upload Single File" enabled="true">
                  <stringProp name="TestPlan.comments">Split size makes no difference for this type, I do have a split in the code but it does not work correctly.
But it is ignored if you give an array of files.</stringProp>
                  <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="size" elementType="Argument">
                        <stringProp name="Argument.name">size</stringProp>
                        <stringProp name="Argument.value">10485760</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="id" elementType="Argument">
                        <stringProp name="Argument.name">id</stringProp>
                        <stringProp name="Argument.value">${__threadNum}_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="directory" elementType="Argument">
                        <stringProp name="Argument.name">directory</stringProp>
                        <stringProp name="Argument.value">${baseDir}/</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="iteration" elementType="Argument">
                        <stringProp name="Argument.name">iteration</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="classname">com.joyent.manta.jmeter.CreateObject</stringProp>
                </JavaSampler>
                <hashTree/>
              </hashTree>
              <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Directoty Listing" enabled="true">
                <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="directory" elementType="Argument">
                      <stringProp name="Argument.name">directory</stringProp>
                      <stringProp name="Argument.value">${baseDir}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="filter" elementType="Argument">
                      <stringProp name="Argument.name">filter</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="classname">com.joyent.manta.jmeter.DirectoryListing</stringProp>
              </JavaSampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">String directory = &quot;${__property(baseDir)}&quot;;
vars.put(&quot;baseDir&quot;, directory);
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="3404360">obj_</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="Clean Up" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1503934899000</longProp>
        <longProp name="ThreadGroup.end_time">1503934899000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </PostThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${cleanup}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Resetting the base directory" enabled="true">
            <stringProp name="BeanShellSampler.query">String directory = &quot;${__property(baseDir)}&quot;;
vars.put(&quot;baseDir&quot;, directory);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Java Request" enabled="true">
            <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Manta URL" elementType="Argument">
                  <stringProp name="Argument.name">Manta URL</stringProp>
                  <stringProp name="Argument.value">https://eu-central.manta.samsungcloud.io/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="MANTA_USER" elementType="Argument">
                  <stringProp name="Argument.name">MANTA_USER</stringProp>
                  <stringProp name="Argument.value">douglas.anderson</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="MANTA_KEY_ID" elementType="Argument">
                  <stringProp name="Argument.name">MANTA_KEY_ID</stringProp>
                  <stringProp name="Argument.value">SHA256:vyyDe0jZ+A9XiSvfbsDVrI9X6AdhSzNac33a9tIoq5g</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="directory" elementType="Argument">
                  <stringProp name="Argument.name">directory</stringProp>
                  <stringProp name="Argument.value">${baseDir}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="classname">com.joyent.manta.jmeter.DeleteDirectory</stringProp>
          </JavaSampler>
          <hashTree/>
          <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Delete the generated file" enabled="true">
            <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
            <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
            <stringProp name="SystemSampler.command">/bin/rm</stringProp>
            <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">/tmp/garbage.txt</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SystemSampler.directory"></stringProp>
          </SystemSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1331942542">differ</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>

